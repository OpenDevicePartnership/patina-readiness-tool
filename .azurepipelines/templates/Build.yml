#
# Azure pipeline template for build.
#
# Copyright (c) Microsoft Corporation. All rights reserved.
##

jobs:
  - job: build_and_test
    displayName: Build and Test the Rust DXE Core Readiness Tool

    timeoutInMinutes: 30

    workspace:
      clean: all

    pool:
      vmImage: 'windows-latest'

    variables:
      - group: "UEFI Rust Tokens"

    steps:
    - checkout: self
      fetchDepth: 1
      clean: true

    - task: UsePythonVersion@0
      displayName: 'Use Python 3.12'
      inputs:
        versionSpec: '3.12.x'
        architecture: 'x64'

    - template: Steps/InstallMarkdownLint.yml@mu_devops
    - template: Steps/RunMarkdownLint.yml@mu_devops
    - template: Steps/InstallSpellCheck.yml@mu_devops
    - template: Steps/RunSpellCheck.yml@mu_devops
      parameters:
        spell_check_parameters: "-c cspell.yml **/*.md **/*.py **/*.rs"

    - template: Steps/RustSetupSteps.yml@mu_devops

    - task: PowerShell@2
      displayName: Setup Cred Provider
      inputs:
        targetType: 'inline'
        script: |
          $cargoPath = Join-Path -Path $env:USERPROFILE -ChildPath ".cargo"
          $configPath = "$cargoPath\config.toml"
          New-Item -ItemType Directory -Force -Path "$cargoPath\.cargo" | Out-Null
          "[registry]" | Out-File -Encoding "UTF8" -Append -FilePath $configPath
          'global-credential-providers = ["cargo:token"]' | Out-File -Encoding "UTF8" -Append -FilePath $configPath
          "" | Out-File -Encoding "UTF8" -Append -FilePath $configPath

    # Run a powershell script to conver the job access token using ""Basic " + [Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes("PAT:" + "123abc"))" to an output variable
    - task: PowerShell@2
      displayName: Convert Registry Token
      name: ConvertRegistryToken
      inputs:
        targetType: 'inline'
        script: |
          $pat = "$(msuefi-authpat)"
          $base64 = "Basic " + [Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes("PAT:" + $pat))
          Write-Host "##vso[task.setvariable variable=base64Pat;isOutput=true;]$base64"

    - script: cargo login "$(ConvertRegistryToken.base64Pat)" --registry patina-fw
      displayName: Login to Registry

    - template: Steps/RustCargoSteps.yml@mu_devops
      parameters:
        build_command: "cargo make build"
        format_command: cargo make fmt && cargo make clippy"
        test_command: "cargo make test"

    - task: CopyFiles@2
      displayName: "Stage QEMU x86_64 DXE Readiness Capture (EFI) Debug Binary"
      inputs:
        targetFolder: '$(Build.ArtifactStagingDirectory)/Bin/dxe_readiness_capture/debug/x86_64'
        SourceFolder: 'target/x86_64-unknown-uefi/debug'
        contents: |
            **/qemu_dxe_readiness_capture.efi
            **/qemu_dxe_readiness_capture.pdb
        flattenFolders: true
      condition: Succeeded()

    - task: CopyFiles@2
      displayName: "Stage QEMU aarch64 DXE Readiness Capture (EFI) Debug Binary"
      inputs:
        targetFolder: '$(Build.ArtifactStagingDirectory)/Bin/dxe_readiness_capture/debug/aarch64'
        SourceFolder: 'target/aarch64-unknown-uefi/debug'
        contents: |
            **/qemu_dxe_readiness_capture.efi
            **/qemu_dxe_readiness_capture.pdb
        flattenFolders: true
      condition: Succeeded()

    - task: CopyFiles@2
      displayName: "Stage x86_64 DXE Readiness Validator (Windows) Debug Binary"
      inputs:
        targetFolder: '$(Build.ArtifactStagingDirectory)/Bin/dxe_readiness_validator/debug/x86_64'
        SourceFolder: 'target/x86_64-pc-windows-msvc/debug'
        contents: |
            **/dxe_readiness_validator.exe
            **/dxe_readiness_validator.pdb
        flattenFolders: true
      condition: Succeeded()

    - task: CopyFiles@2
      displayName: "Stage aarch64 DXE Readiness Validator (Windows) Debug Binary"
      inputs:
        targetFolder: '$(Build.ArtifactStagingDirectory)/Bin/dxe_readiness_validator/debug/aarch64'
        SourceFolder: 'target/aarch64-pc-windows-msvc/debug'
        contents: |
            **/dxe_readiness_validator.exe
            **/dxe_readiness_validator.pdb
        flattenFolders: true
      condition: Succeeded()

    - task: PublishBuildArtifacts@1
      continueOnError: true
      displayName: Publish Binaries
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)/Bin'
        artifactName: 'Bin'
      condition: Succeeded()
